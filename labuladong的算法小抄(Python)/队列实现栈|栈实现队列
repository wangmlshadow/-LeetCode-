# LeetCode的225和232

# 用栈实现队列
# python 使用list模拟栈
# 因此list只能使用下面这两个操作
# list.append 压栈
# list.pop 出栈 并返回出栈的元素
# list[-1] 获取栈顶元素

# 你能否实现每个操作均摊时间复杂度为 O(1) 的队列？
# 换句话说，执行 n 个操作的总时间复杂度为 O(n) ，即使其中一个操作可能花费较长时间。

class MyQueue:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.stack_1 = list()# 用于存放元素
        self.stack_2 = list()# 起辅助作用


    def push(self, x: int) -> None:
        """
        Push element x to the back of queue.
        """
        self.stack_1.append(x)


    def pop(self) -> int:
        """
        Removes the element from in front of queue and returns that element.
        """
        self.peek()
        return self.stack_2.pop()

    # 时间复杂度均摊为 O(1)
    def peek(self) -> int:
        """
        Get the front element.
        """
        if not self.stack_2:
            while self.stack_1:
                self.stack_2.append(self.stack_1.pop())
        return self.stack_2[-1]


    # 如果两个栈都为空 则队列为空
    def empty(self) -> bool:
        """
        Returns whether the queue is empty.
        """
        return (not self.stack_1) and (not self.stack_2)



# Your MyQueue object will be instantiated and called as such:
# obj = MyQueue()
# obj.push(x)
# param_2 = obj.pop()
# param_3 = obj.peek()
# param_4 = obj.empty()

"""
执行结果：通过
显示详情
执行用时：36 ms, 在所有 Python3 提交中击败了83.70%的用户
内存消耗：15 MB, 在所有 Python3 提交中击败了29.93%的用户
"""

# 用队列实现栈
# 使用list模拟队列
# list.append 入队
# list.pop(0) 出队
# list[0] 获取队首元素

class MyStack:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.queue = list()
        self.x = 0# 栈顶元素


    def push(self, x: int) -> None:
        """
        Push element x onto stack.
        """
        self.queue.append(x)
        self.x = x


    def pop(self) -> int:
        """
        Removes the element on top of the stack and returns that element.
        """
        # 出栈
        # 将队列前面所有的元素去除再入队
        size = len(self.queue)
        while size > 2:
            self.queue.append(self.queue.pop(0))
            size = size - 1
        self.x = self.queue[0]
        self.queue.append(self.queue.pop(0))
        return self.queue.pop(0)


    def top(self) -> int:
        """
        Get the top element.
        """
        return self.x


    def empty(self) -> bool:
        """
        Returns whether the stack is empty.
        """
        return not self.queue



# Your MyStack object will be instantiated and called as such:
# obj = MyStack()
# obj.push(x)
# param_2 = obj.pop()
# param_3 = obj.top()
# param_4 = obj.empty()

"""
执行结果：通过
显示详情
执行用时：24 ms, 在所有 Python3 提交中击败了99.91%的用户
内存消耗：14.7 MB, 在所有 Python3 提交中击败了96.72%的用户
"""
