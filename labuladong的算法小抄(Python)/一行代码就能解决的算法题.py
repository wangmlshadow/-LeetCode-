# Nim游戏
# 第292
"""
你和你的朋友，两个人一起玩 Nim 游戏：

桌子上有一堆石头。
你们轮流进行自己的回合，你作为先手。
每一回合，轮到的人拿掉 1 - 3 块石头。
拿掉最后一块石头的人就是获胜者。
假设你们每一步都是最优解。请编写一个函数，来判断你是否可以在给定石头数量为 n 的情况下赢得游戏。如果可以赢，返回 true；否则，返回 false 。
"""

class Solution:
    def canWinNim(self, n: int) -> bool:
        # 如果n为4的倍数 则输
        # 否则可以让对方面对4的倍数 则赢
        return (n % 4) != 0
"""
执行结果：通过 显示详情 添加备注
执行用时：48 ms, 在所有 Python3 提交中击败了11.95%的用户
内存消耗：14.8 MB, 在所有 Python3 提交中击败了65.29%的用户
"""

# 第877
"""
亚历克斯和李用几堆石子在做游戏。偶数堆石子排成一行，每堆都有正整数颗石子 piles[i] 。

游戏以谁手中的石子最多来决出胜负。石子的总数是奇数，所以没有平局。

亚历克斯和李轮流进行，亚历克斯先开始。 每回合，玩家从行的开始或结束处取走整堆石头。 这种情况一直持续到没有更多的石子堆为止，此时手中石子最多的玩家获胜。

假设亚历克斯和李都发挥出最佳水平，当亚历克斯赢得比赛时返回 true ，当李赢得比赛时返回 false 。
"""

# 先手可以选择拿到的石子都是奇数堆还是偶数堆 从而保证自己必胜

class Solution:
    def stoneGame(self, piles: List[int]) -> bool:
        return True
"""
执行结果：通过 显示详情 添加备注
执行用时：44 ms, 在所有 Python3 提交中击败了71.40%的用户
内存消耗：14.9 MB, 在所有 Python3 提交中击败了69.78%的用户
"""

# 第319
"""
初始时有 n 个灯泡处于关闭状态。

对某个灯泡切换开关意味着：如果灯泡状态为关闭，那该灯泡就会被开启；而灯泡状态为开启，那该灯泡就会被关闭。

第 1 轮，每个灯泡切换一次开关。即，打开所有的灯泡。

第 2 轮，每两个灯泡切换一次开关。 即，每两个灯泡关闭一个。

第 3 轮，每三个灯泡切换一次开关。

第 i 轮，每 i 个灯泡切换一次开关。 而第 n 轮，你只切换最后一个灯泡的开关。

找出 n 轮后有多少个亮着的灯泡。
"""
class Solution:
    def bulbSwitch(self, n: int) -> int:
        return int(math.sqrt(n))
"""
执行结果：通过 显示详情 添加备注
执行用时：32 ms, 在所有 Python3 提交中击败了94.35%的用户
内存消耗：14.9 MB, 在所有 Python3 提交中击败了31.88%的用户
"""
